from django.shortcuts import render_to_response, render
from django.template.context import RequestContext
from django.contrib.auth.decorators import login_required, permission_required,\
    user_passes_test
from pydgin_auth.decorators import is_in_group


def index(request):
    return render(request, 'auth_test/index.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/index.html', context_instance=context)


def login_success(request):
    return render(request, 'auth_test/auth_test.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/auth_test.html', context_instance=context)
    #return render(request, 'auth_test/auth_test.html', context, content_type='text/html')


def check_section_perms(request):
    return render(request, 'auth_test/check_perms.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/check_perms.html', context_instance=context)


def check_green(request):
    return render(request, 'auth_test/green_page.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/green_page.html', context_instance=context)


@login_required(login_url='/accounts/login/')
@permission_required('auth_test.can_read', login_url='/accounts/permission_denied/')
def check_blue(request):
    return render(request, 'auth_test/blue_page.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/blue_page.html', context_instance=context)

@login_required(login_url='/accounts/login/')
@is_in_group("CURATOR", login_url='/accounts/permission_denied/')
def check_yellow(request):
    return render(request, 'auth_test/yellow_page.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/yellow_page.html', context_instance=context)


@login_required(login_url='/accounts/login/')
@is_in_group("PYDGIN_ADMIN", login_url='/accounts/permission_denied/')
def check_red(request):
    return render(request, 'auth_test/yellow_page.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/red_page.html', context_instance=context)


@login_required(login_url='/accounts/login/')
@user_passes_test(lambda u: u.is_superuser, login_url='/accounts/permission_denied/')
def check_black(request):
    return render(request, 'auth_test/yellow_page.html')
    #context = RequestContext(request, {'request': request, 'user': request.user})
    #return render_to_response('auth_test/black_page.html', context_instance=context)
